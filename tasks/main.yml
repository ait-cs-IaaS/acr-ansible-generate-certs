---
- name: Append cert defaults according to type
  ansible.builtin.set_fact:
    _certificates:
      "{{ certificates | append_cert_defaults(ca_base_path, {'pw': ca_pw, 'key':
      ca_key, 'cert': ca_cert}) }}"

- name: Check for already existing certificates
  ansible.builtin.stat:
    path: '{{ cert.path }}.crt'
  loop: '{{ _certificates | default([]) }}'
  loop_control:
    loop_var: cert
  register: file_check

- name: Check state of currently existing certificates
  community.crypto.x509_certificate_info:
    path: '{{ fcheck.cert.path }}.crt'
    valid_at:
      check: '{{ ca_check_valid_till }}'
  loop: '{{ file_check.results }}'
  loop_control:
    loop_var: fcheck
  register: certificate_check
  when: fcheck.stat.exists
  no_log: true

- name: Delete about to expire certificate
  ansible.builtin.file:
    name: '{{ validity_check.cert.path }}.crt'
    state: absent
  loop: '{{ certificate_check.results }}'
  loop_control:
    loop_var: validity_check
  when:
    not (validity_check.skipped is defined and validity_check.skipped) and not
    validity_check.valid_at.check
  no_log: true

- name: Display filtered certificates
  ansible.builtin.set_fact:
    _certificates:
      '{{ certificate_check.results | remove_present_and_expired() }}'

- name: Create certificate directories
  ansible.builtin.file:
    name: '{{ cert.path | dirname }}'
    state: directory
    recurse: true
  loop: '{{ _certificates | default([]) }}'
  loop_control:
    loop_var: cert
  no_log: true

- name: Check for already existing private keys
  ansible.builtin.stat:
    path: '{{ cert.path }}.key'
  loop: '{{ _certificates | default([]) }}'
  loop_control:
    loop_var: cert
  no_log: true
  register: file_check

- name: Generate private keys
  async: 3600
  poll: 0
  community.crypto.openssl_privatekey:
    path: '{{ result.cert.path }}.key'
    passphrase: '{{ result.cert.password | default(omit) }}'
    cipher: '{{ result.cert.cipher | default(omit) }}'
  loop: '{{ file_check.results | default([]) }}'
  loop_control:
    loop_var: result
  no_log: true
  when: not result.stat.exists

- name: Generate certificate signing requests
  async: 3600
  poll: 0
  community.crypto.openssl_csr:
    use_common_name_for_san: true
    path: '{{ cert.path }}.csr'
    privatekey_path: '{{ cert.path }}.key'
    privatekey_passphrase: '{{ cert.password | default(omit) }}'
    country_name: '{{ cert.country | default(omit) }}'
    state_or_province_name: '{{ cert.state | default(omit) }}'
    locality_name: '{{ cert.locality | default(omit) }}'
    organization_name: '{{ cert.organization | default(omit) }}'
    organizational_unit_name: '{{ cert.organization_unit | default(omit) }}'
    email_address: '{{ cert.email_address | default(omit) }}'
    subject_alt_name: '{{ cert.subject_alt_name | default(omit) }}'
    basic_constraints: '{{ cert.basic_constraints | default(omit) }}'
    # we at least need a common name
    common_name: '{{ cert.common_name }}'
    # smime
    key_usage: '{{ cert.key_usage | default(omit) }}'
    key_usage_critical: '{{ cert.key_usage_critical | default(omit) }}'
    extended_key_usage: '{{ cert.extended_key_usage | default(omit) }}'
  loop: '{{ _certificates | default([]) }}'
  loop_control:
    loop_var: cert

- name: Sign certificate
  async: 3600
  poll: 0
  community.crypto.x509_certificate:
    path: '{{ cert.path }}.crt'
    csr_path: '{{ cert.path }}.csr'
    provider: '{{ cert.provider | default(omit) }}'
    # selfsigned
    privatekey_path: '{{ cert.path }}.key'
    privatekey_passphrase: '{{ cert.privatekey_passphrase | default(omit) }}'
    selfsigned_not_before: '{{ cert.selfsigned_not_before | default(omit) }}'
    selfsigned_not_after: '{{ cert.selfsigned_not_after | default(omit) }}'
    # signed
    ownca_path: '{{ cert.ownca_path | default(omit) }}'
    ownca_privatekey_path: '{{ cert.ownca_privatekey_path | default(omit) }}'
    ownca_privatekey_passphrase:
      '{{ cert.ownca_privatekey_passphrase | default(omit) }}'
    ownca_not_before: '{{ cert.ownca_not_before | default(omit) }}'
    ownca_not_after: '{{ cert.ownca_not_after | default(omit) }}'
  loop: '{{ _certificates | default([]) }}'
  loop_control:
    loop_var: cert

- name: Create PKCS#12 version for thunderbird/firefox
  async: 3600
  poll: 0
  community.crypto.openssl_pkcs12:
    action: export
    path: '{{ cert.path }}.p12'
    friendly_name: '{{ cert.name }}'
    privatekey_path: '{{ cert.path }}.key'
    privatekey_passphrase: '{{ cert.password | default(omit) }}'
    passphrase: '{{ cert.password | default(omit) }}'
    certificate_path: '{{ cert.path }}.crt'
    state: present
  loop: '{{ _certificates | default([]) }}'
  loop_control:
    loop_var: cert
  when: cert.cert_type == "smime"
